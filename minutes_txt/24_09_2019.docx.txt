Participants:

Bettina

Max
Julia

Fahad

Full samples: https://drive.google.com/drive/folders/
1aONl-KDPwMpa3DmhCKAPlbprS_ToCPE0?usp=sharing

  • 
        Diagram for the Finnish example:

<#kissa> a ontolex:Word ;

ontolex:canonicalForm [ontolex:writtenRep "kissa"@fi];

morph:inflects <#finnish_noun_type_kala> .

<#finnish_noun_type_kala> a morph:InflectionType ;

morph:paradigm <#finnish_noun_type_9> ;

morph:next <#finnish_noun_type_kala_number_direct> ; # this means that there
will be more "slots" for grammatical categories

morph:next <#finnish_noun_type_kala_number_oblique> .

<#finnish_noun_type_kala_number_direct> a morph:InflectionType ;

morph:paradigm <#finnish_noun_type_9> ;

morph:next <#finnish_noun_type_kala_case_direct> ;

morph:example "kissa"@fi .

<#finnish_noun_type_kala_number_oblique> a morph:InflectionType ;

morph:paradigm <#finnish_noun_type_9> ;

morph:next <#finnish_noun_type_kala_case_oblique> ;

morph:example "kissoi-"@fi .

<#finnish_noun_type_kala_case_direct> a morph:InflectionType ;

morph:paradigm <#finnish_noun_type_9> ;

morph:next <#finnish_noun_type_kala_post> ;

morph:example "kissassa"@fi .

<#finnish_noun_type_kala_case_oblique> a morph:InflectionType ;

morph:paradigm <#finnish_noun_type_9> ;

morph:next <#finnish_noun_type_kala_post> ;

morph:example "kissoissa"@fi .

<#finnish_noun_type_kala_post> a morph:InflectionType ;

morph:paradigm <#finnish_noun_type_9> ;

morph:example "kissojen"@fi .

[image3]

  • 
        SPARQL for forms generation:

prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

prefix ontolex: <http://www.w3.org/ns/lemon/ontolex#>

prefix lexinfo: <http://www.lexinfo.net/ontology/2.0/lexinfo#>

prefix morph: <https://www.w3.org/community/ontolex/wiki/Morphology#>

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

select ?w_end where {

# start with an ontolex:Word

?w a ontolex:Word ;

morph:inflects ?begin ;

ontolex:canonicalForm/ontolex:writtenRep ?w_begin .

?begin morph:next* ?midI .

FILTER NOT EXISTS { [] morph:next ?begin }

{

?rule_I morph:inflectionType ?midI ;

morph:replacement ?repl_I .

?repl_I morph:source ?s_I ;

morph:target ?t_I .

}

BIND(REPLACE(?w_begin, ?s_I, ?t_I) as ?w_midI)

# go to next slot

?midI morph:next ?midJ .

{

?rule_J morph:inflectionType ?midJ ;

morph:replacement ?repl_J .

?repl_J morph:source ?s_J ;

morph:target ?t_J .

}

BIND(REPLACE(?w_midI, ?s_J, ?t_J) as ?w_midJ)

# get to the end of the path

?midJ morph:next* ?end .

FILTER NOT EXISTS { ?end morph:next [] }

{

?rule_end morph:inflectionType ?end ;

morph:replacement ?repl_end .

?repl_end morph:source ?s_end ;

morph:target ?t_end .

}

BIND(REPLACE(?w_midJ, ?s_end, ?t_end) as ?w_end)

}

order by ?start ?end

[image2]

<#finnish_noun_type_kala_nom> a morph:Rule ;

morph:inflectionType <#finnish_noun_type_kala_case_direct> ;

lexinfo:case lexinfo:nominative ;

morph:example "kissa"@fi ; # optional

morph:replacement [morph:source "$"; morph:target ""] . # we can actually
create nodes for widely used replacements, like _no replacement_. Or just leave
this empty

<#finnish_noun_type_kala_gen> a morph:Rule ;

morph:inflectionType <#finnish_noun_type_kala_case_oblique> ;

lexinfo:case lexinfo:nominative ;

morph:example "kissa"@fi ; # optional

morph:replacement [morph:source "$"; morph:target "n"] .

  • 
        Talking points:

      □ 
            There should be a connection to Form from somewhere

      □ 
            How to deal with defective paradigmata?

      □ 
            How to get linguistic information in SPARQL? Something like SELECT
            lexinfo:*

Morphology Module Draft 3.0

InflectionType denotes a step that adds a certain grammatical meaning for the
group of words which add the same affixes. It is a declension type without
allomorphy.[image1]

Bettina: create new diagram which illustrates the generation process as a whole
(input - transformation - output)

Max: create SPARQL construct query that outputs the following kinds of triples:

 1.
        [ ] a ontolex:Form

 2.
        [ ] a morph:Morph

 3.
        [ontolex:Form instance] morph:consistsOf [morph:Morph instance]

 4.
        [morph:Morph instance] morph:grammaticalMeaning [lexinfo instance]

